// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rule schemas should be convertible to TS types for documentation purposes no-extra-parens 1`] = `
"
# SCHEMA:

{
  "anyOf": [
    {
      "type": "array",
      "items": [{ "enum": ["functions"] }],
      "minItems": 0,
      "maxItems": 1
    },
    {
      "type": "array",
      "items": [
        { "enum": ["all"] },
        {
          "type": "object",
          "properties": {
            "conditionalAssign": { "type": "boolean" },
            "nestedBinaryExpressions": { "type": "boolean" },
            "returnAssign": { "type": "boolean" },
            "ignoreJSX": {
              "enum": ["none", "all", "single-line", "multi-line"]
            },
            "enforceForArrowConditionals": { "type": "boolean" },
            "enforceForSequenceExpressions": { "type": "boolean" },
            "enforceForNewInMemberExpressions": { "type": "boolean" },
            "enforceForFunctionPrototypeMethods": { "type": "boolean" },
            "allowParensAfterCommentPattern": { "type": "string" }
          },
          "additionalProperties": false
        }
      ],
      "minItems": 0,
      "maxItems": 2
    }
  ]
}


# TYPES:

type Options =
  | ([] | ['functions', ...unknown[]])
  | (
      | []
      | ['all']
      | [
          'all',
          {
            conditionalAssign?: boolean;
            nestedBinaryExpressions?: boolean;
            returnAssign?: boolean;
            ignoreJSX?: 'none' | 'all' | 'single-line' | 'multi-line';
            enforceForArrowConditionals?: boolean;
            enforceForSequenceExpressions?: boolean;
            enforceForNewInMemberExpressions?: boolean;
            enforceForFunctionPrototypeMethods?: boolean;
            allowParensAfterCommentPattern?: string;
          },
          ...unknown[],
        ]
    );
"
`;
