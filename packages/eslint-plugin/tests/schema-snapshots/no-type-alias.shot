// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rule schemas should be convertible to TS types for documentation purposes no-type-alias 1`] = `
"
# SCHEMA:

[
  {
    "type": "object",
    "properties": {
      "allowAliases": {
        "description": "Whether to allow direct one-to-one type aliases.",
        "enum": [
          "always",
          "never",
          "in-unions",
          "in-intersections",
          "in-unions-and-intersections"
        ]
      },
      "allowCallbacks": {
        "description": "Whether to allow type aliases for callbacks.",
        "enum": ["always", "never"]
      },
      "allowConditionalTypes": {
        "description": "Whether to allow type aliases for conditional types.",
        "enum": ["always", "never"]
      },
      "allowConstructors": {
        "description": "Whether to allow type aliases with constructors.",
        "enum": ["always", "never"]
      },
      "allowLiterals": {
        "description": "Whether to allow type aliases with object literal types.",
        "enum": [
          "always",
          "never",
          "in-unions",
          "in-intersections",
          "in-unions-and-intersections"
        ]
      },
      "allowMappedTypes": {
        "description": "Whether to allow type aliases with mapped types.",
        "enum": [
          "always",
          "never",
          "in-unions",
          "in-intersections",
          "in-unions-and-intersections"
        ]
      },
      "allowTupleTypes": {
        "description": "Whether to allow type aliases with tuple types.",
        "enum": [
          "always",
          "never",
          "in-unions",
          "in-intersections",
          "in-unions-and-intersections"
        ]
      },
      "allowGenerics": {
        "description": "Whether to allow type aliases with generic types.",
        "enum": ["always", "never"]
      }
    },
    "additionalProperties": false
  }
]


# TYPES:

type Options = [
  {
    /** Whether to allow direct one-to-one type aliases. */
    allowAliases?:
      | 'always'
      | 'never'
      | 'in-unions'
      | 'in-intersections'
      | 'in-unions-and-intersections';
    /** Whether to allow type aliases for callbacks. */
    allowCallbacks?: 'always' | 'never';
    /** Whether to allow type aliases for conditional types. */
    allowConditionalTypes?: 'always' | 'never';
    /** Whether to allow type aliases with constructors. */
    allowConstructors?: 'always' | 'never';
    /** Whether to allow type aliases with object literal types. */
    allowLiterals?:
      | 'always'
      | 'never'
      | 'in-unions'
      | 'in-intersections'
      | 'in-unions-and-intersections';
    /** Whether to allow type aliases with mapped types. */
    allowMappedTypes?:
      | 'always'
      | 'never'
      | 'in-unions'
      | 'in-intersections'
      | 'in-unions-and-intersections';
    /** Whether to allow type aliases with tuple types. */
    allowTupleTypes?:
      | 'always'
      | 'never'
      | 'in-unions'
      | 'in-intersections'
      | 'in-unions-and-intersections';
    /** Whether to allow type aliases with generic types. */
    allowGenerics?: 'always' | 'never';
  },
];
"
`;
